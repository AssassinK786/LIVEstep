#!/usr/local/bin/python3.7

# Not that the shebang cannot be /usr/bin/env ... if this script is intended to
# be run by rc.d

# This implements enough of the XDG spec to create .app bundles for desktop files.
# If someone cares enough about the convoluted XDG spec to implement it more fully,
# https://github.com/jceb/dex/blob/master/dex might be a good starting point.
# It is refreshing to see how straightforward things are in GNUstep compared to XDG.

# USAGE: $0 <desktop file or directory containing desktop files> [<destination directory>]
# or, to watch the system for new desktop files, just call it without arguments


# Copyright (c) 2020, Simon Peter <probono@puredarwin.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


import os, sys, stat, shutil, subprocess, plistlib, signal, time
from xdg import IniFile, IconTheme  # pkg install py37-xdg


# Create .app bundles for desktop files

def d2a(desktopfile, destination):
    i = IniFile.IniFile()

    i.parse(desktopfile)

    if not "Desktop Entry" in i.content.keys():
        print("No Desktop Entry section, hence skipping '%s'" % desktopfile)
        return

    if "Name" in i.content["Desktop Entry"].keys():
        name = i.content["Desktop Entry"]["Name"]
    else:
        print("No Name=..., hence skipping '%s'" % desktopfile)
        return
    if "Exec" in i.content["Desktop Entry"].keys():
        exec = i.content["Desktop Entry"]["Exec"]
    else:
        print("No Exec=..., hence skipping '%s'" % desktopfile)
        return
    if "Comment" in i.content["Desktop Entry"].keys():
        description = i.content["Desktop Entry"]["Comment"]
    else:
        description = name
    if "Icon" in i.content["Desktop Entry"].keys():
        icon = i.content["Desktop Entry"]["Icon"]
    else:
        print("No Icon=..., hence skipping '%s'" % desktopfile)
        return
    iconfile = IconTheme.getIconPath(icon, size=48, extensions=['png'])
    svgiconfile = IconTheme.getIconPath(icon, size=48, extensions=['svg'])

    if svgiconfile == None and (iconfile == None or os.path.exists(iconfile) == False):

        print("The icon '%s' does not exist" % icon)
        return
    else:
        if iconfile == None or os.path.exists(iconfile) == False:
            if os.path.exists(svgiconfile) == False:
                print("The icon '%s' does not exist" % icon)
                return

    if "MimeType" in i.content["Desktop Entry"].keys():
        mime = i.content["Desktop Entry"]["MimeType"]
    else:
        mime = None
    if i.content["Desktop Entry"]["Type"] != "Application":
        print("Not using %s because it is not an application" % desktopfile)
        return

    print("Using %s" % desktopfile)

    if os.path.isdir('%s/%s.app' % (destination, name)):
        try:
            print("Removing pre-existing .app bundle '%s/%s.app'" % (destination, name))
            shutil.rmtree("%s/%s.app" % (destination, name))
        except:
            print("Could not remove pre-existing .app bundle, exiting")
            return

    try:
        os.makedirs("%s/%s.app/Resources" % (destination, name))
    except:
        print("Could not create .app bundle, exiting")
        return

    if iconfile == None and svgiconfile == None:
        print("Could not find a suitable icon for %s', exiting" % icon)
        return
    elif iconfile != None:
        print("Using icon from %s" % iconfile)
        shutil.copyfile(iconfile, ("%s/%s.app/Resources/%s.png" % (destination, name, name)))
    elif iconfile == None and svgiconfile != None:
        print("Could not find a png icon for '%s', converting '%s' to png" % (icon, svgiconfile))
        try:
            subprocess.call(["rsvg-convert", "-a", "-w", "48", "-h", "48", svgiconfile, "-o", ("%s/%s.app/Resources/%s.png" % (destination, name, name))])
        except:
            print("The conversion of '%s' to png failed. Is rsvg-convert installed?")
            return


    launcher = """#!/bin/sh
    exec %EXEC% "$@"
    """

    launcher_path = ("%s/%s.app/%s" % (destination, name, name))
    launcher_file = open(launcher_path, "w")
    launcher_file.write(launcher.replace("%EXEC%", exec))
    launcher_file.close()

    # Set executable bit
    os.chmod(launcher_path,
             stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH | stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH | stat.S_IWUSR)

    # TODO: Handle MIME types and file associations more adequately.
    # Again, it is refreshing to see how straightforward things are in GNUstep compared to XDG,
    # e.g., how easy an application can set the file types it understands, define what those files
    # are called, and which icons to use to represent them. What is imlemented below is the bare minimum
    # to get things going. Feel free to implement more.
    nstypes = []
    if mime != None:
        mimetypes = mime.split(";")
        mimetypes = [x for x in mimetypes if x] # Remove empty items
        nstypes = [{"NSDocumentClass": ("%sDocument" % name.replace(" ", "")), "NSName": ("MIME type %s understands" % name), "NSHumanReadableName": ("MIME type %s understands" % name), "NSMIMETypes": mimetypes}]

    properties = {
        "ApplicationName": name,
        "ApplicationDescription": description,
        "NSExecutable": name,
        "NSIcon": name + ".png",
        "XAppWrapper": True,
        "NSTypes": nstypes
    }
    fileName = open("%s/%s.app/Resources/Info-gnustep.plist" % (destination, name), 'wb')
    plistlib.dump(properties, fileName)
    fileName.close()

    print("Wrapper placed in %s/%s.app" % (destination, name))


well_known_desktop_file_locations = [
    '/usr/local/share/applications/',
]

def checkIfProcessRunning(processName):
    '''
    Check if there is any running process that contains the given name processName.
    '''
    #Iterate over the all the running process
    for proc in psutil.process_iter():
        try:
            # Check if process name contains the given name string.
            if processName.lower() in proc.name().lower():
                return True
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    return False;

def directory_changed(path):
    print('Directory Changed: %s' % path)
    current_desktop_files_in_system = get_desktop_files_in_system()
    for df in current_desktop_files_in_system:
        if not df in handled_desktop_files_in_system:
            if df.endswith(".desktop") and os.path.exists(df):
                # print("%s has not been handled yet" % df)
                while checkIfProcessRunning("pkg"):
                    time.sleep(3)
                    print("Waiting for pkg process to exit...")
                print("Creating wrapper for' %s'" % (df))
                d2a(df, "/usr/local/GNUstep/Local/Applications/")
                try:
                    subprocess.call(["/usr/local/GNUstep/System/Tools/make_services"])
                except:
                    print("Could not run make_services, is GNUstep installed?")
                handled_desktop_files_in_system.append(df)

def get_desktop_files_in_system():
    all_desktopfiles = []
    for path in well_known_desktop_file_locations:
        desktopfiles = [os.path.join(path, f) for f in os.listdir(path) if
                        os.path.isfile(os.path.join(path, f))]
        for d in desktopfiles:
            all_desktopfiles.append(d)
    return(all_desktopfiles)

handled_desktop_files_in_system = []

if __name__ == "__main__":

    destination = "."

    if len(sys.argv) < 2:
        # Using Qt for QFileSystemWatcher as long as
        # https://people.freebsd.org/~dwhite/PyKQueue/
        # is unmaintained and not available for python3
        try:
            from PyQt5 import QtCore
        except:
            print("Cannot watch the system for newly installed applications since PyQt5 is missing.")
            exit(1)

        try:
            import psutil
        except:
            print("Cannot watch the system for newly installed applications since py37-psutil is missing.")
            exit(1)

        signal.signal(signal.SIGINT, QtCore.QCoreApplication.quit) # FIXME: Make Ctrl-C work; Does not seem to work

        app = QtCore.QCoreApplication(sys.argv)

        handled_desktop_files_in_system = get_desktop_files_in_system()

        fs_watcher = QtCore.QFileSystemWatcher(well_known_desktop_file_locations)
        fs_watcher.directoryChanged.connect(directory_changed)

        sys.exit(app.exec_())


    if len(sys.argv) >2:
        if(os.path.isdir(sys.argv[2])):
            destination = sys.argv[2]
        else:
            print("%s is not a directory" % sys.argv[2])
            exit(1)

    desktopfile_or_directory = sys.argv[1]

    if not os.path.exists(desktopfile_or_directory):
        print("%s does not exist" % desktopfile_or_directory)
        exit(1)

    if os.path.isdir(desktopfile_or_directory):
        print("Not yet implemented")
        desktopfiles = [os.path.join(desktopfile_or_directory, f) for f in os.listdir(desktopfile_or_directory) if os.path.isfile(os.path.join(desktopfile_or_directory, f))]
        for desktopfile in desktopfiles:
            d2a(desktopfile, destination)
    else:
        d2a(desktopfile_or_directory, destination)

    # Register file types (and hopefully also MIME types) with the system
    # https://lists.gnu.org/archive/html/discuss-gnustep/2014-03/msg00061.html
    # According to https://lists.gnu.org/archive/html/discuss-gnustep/2014-03/msg00072.html
    # make_services does not get run automatically, which is bad since it means that an
    # .app bundle just unzipped somewhere does not get recognized at all.
    # In the ideal world, make_services would get invoked
    # # automatically whenever the system/GWorkspace sees fit.
    # To overcome this, we could check the modification date of the database
    # and if it is older than ourselves, then run make_services.
    # For now we just invoke it here.
    try:
        subprocess.call(["/usr/local/GNUstep/System/Tools/make_services"])
    except:
        print("Could not run make_services, is GNUstep installed?")

